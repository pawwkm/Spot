tests =
    [ [ ws ], test, { ws, test }, [ ws ] ] ;

test =
    "test", ws,
    [ description, ws ],
    input, [ ws ],
    [ start from, [ ws ] ],
    [ ( include | exclude ), [ ws ] | exclude all rules, ws ],
    validity ;
	
description =
    "description", [ ws ], concatenated string ;
	
input =
    "input", [ ws ], concatenated string ;
	
start from =
    "start", ws, "from", ws, string ;
	
include =
    "include", [ ws ], string list ;
	
exclude =
    "exclude", [ ws ], string list ;
	
exclude all rules =
    "exclude", ws, "all", ws, "rules" ;
	
validity =
    "is", ws, [ "not", ws ], "valid" ;

concatenated string =
    string, { [ ws ], string } ;

string list =
    string, { [ ws ], ",", [ ws ], string } ;

string =
    '"', { character | unicode code point | escape sequence }, '"';

character =
    ? All Unicode characters except classes zi and zp and 
    characters \u0000 .. \u001F, \u0022, \u005C, \u007F, \u0081, 
    \u008D, \u008F, \u0090, \u009D, \u1680, \u180E, 
    \u2000 .. \u200F, \u202A .. \u202F,  \u205F, \u2060, 
    \u2066 .. \u206F, \u00A0, \u3000, \uFEFF and \uFFF9 .. \uFFFB ? ;

unicode code point =
    "\u", 4 * ( digit | "a" | "b" | "c" | "d" | "e" | "f" ) ;
    
digit =
    "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

escape sequence =
    "\", 
    ( '"' | "\" | "0" | "a" | "b" | "f" | "n" | "r" | "t" | "v" ) ;

ws =	
    ws character, { ws character } ;

ws character =
    ? Unicode class zs and characters \u0009 .. \u000D, \u0085, 
    \u2028 and \u2029 ? ;